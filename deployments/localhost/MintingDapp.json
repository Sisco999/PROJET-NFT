{
     "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
     "abi": [
          {
               "inputs": [
                    {
                         "internalType": "string",
                         "name": "_initBaseURI",
                         "type": "string"
                    },
                    {
                         "internalType": "string",
                         "name": "_initNotRevealedUri",
                         "type": "string"
                    }
               ],
               "stateMutability": "nonpayable",
               "type": "constructor"
          },
          {
               "anonymous": false,
               "inputs": [
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "owner",
                         "type": "address"
                    },
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "approved",
                         "type": "address"
                    },
                    {
                         "indexed": true,
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "Approval",
               "type": "event"
          },
          {
               "anonymous": false,
               "inputs": [
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "owner",
                         "type": "address"
                    },
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "operator",
                         "type": "address"
                    },
                    {
                         "indexed": false,
                         "internalType": "bool",
                         "name": "approved",
                         "type": "bool"
                    }
               ],
               "name": "ApprovalForAll",
               "type": "event"
          },
          {
               "anonymous": false,
               "inputs": [
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "previousOwner",
                         "type": "address"
                    },
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "newOwner",
                         "type": "address"
                    }
               ],
               "name": "OwnershipTransferred",
               "type": "event"
          },
          {
               "anonymous": false,
               "inputs": [
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "from",
                         "type": "address"
                    },
                    {
                         "indexed": true,
                         "internalType": "address",
                         "name": "to",
                         "type": "address"
                    },
                    {
                         "indexed": true,
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "Transfer",
               "type": "event"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "to",
                         "type": "address"
                    },
                    {
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "approve",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "owner",
                         "type": "address"
                    }
               ],
               "name": "balanceOf",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "getApproved",
               "outputs": [
                    {
                         "internalType": "address",
                         "name": "",
                         "type": "address"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "getContractBalance",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "owner",
                         "type": "address"
                    },
                    {
                         "internalType": "address",
                         "name": "operator",
                         "type": "address"
                    }
               ],
               "name": "isApprovedForAll",
               "outputs": [
                    {
                         "internalType": "bool",
                         "name": "",
                         "type": "bool"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "maxSupply",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "_mintAmount",
                         "type": "uint256"
                    }
               ],
               "name": "mint",
               "outputs": [],
               "stateMutability": "payable",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "name",
               "outputs": [
                    {
                         "internalType": "string",
                         "name": "",
                         "type": "string"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "notRevealedUri",
               "outputs": [
                    {
                         "internalType": "string",
                         "name": "",
                         "type": "string"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "owner",
               "outputs": [
                    {
                         "internalType": "address",
                         "name": "",
                         "type": "address"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "ownerOf",
               "outputs": [
                    {
                         "internalType": "address",
                         "name": "",
                         "type": "address"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "renounceOwnership",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "reveal",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "revealed",
               "outputs": [
                    {
                         "internalType": "bool",
                         "name": "",
                         "type": "bool"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "s_cost",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "s_maxMintAmount",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "from",
                         "type": "address"
                    },
                    {
                         "internalType": "address",
                         "name": "to",
                         "type": "address"
                    },
                    {
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "safeTransferFrom",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "from",
                         "type": "address"
                    },
                    {
                         "internalType": "address",
                         "name": "to",
                         "type": "address"
                    },
                    {
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    },
                    {
                         "internalType": "bytes",
                         "name": "data",
                         "type": "bytes"
                    }
               ],
               "name": "safeTransferFrom",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "operator",
                         "type": "address"
                    },
                    {
                         "internalType": "bool",
                         "name": "approved",
                         "type": "bool"
                    }
               ],
               "name": "setApprovalForAll",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "string",
                         "name": "_newBaseURI",
                         "type": "string"
                    }
               ],
               "name": "setBaseURI",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "_newCost",
                         "type": "uint256"
                    }
               ],
               "name": "setCost",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "string",
                         "name": "_notRevealedURI",
                         "type": "string"
                    }
               ],
               "name": "setNotRevealedURI",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "_newmaxMintAmount",
                         "type": "uint256"
                    }
               ],
               "name": "setmaxMintAmount",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "_newmaxSupply",
                         "type": "uint256"
                    }
               ],
               "name": "setmaxSupply",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "bytes4",
                         "name": "interfaceId",
                         "type": "bytes4"
                    }
               ],
               "name": "supportsInterface",
               "outputs": [
                    {
                         "internalType": "bool",
                         "name": "",
                         "type": "bool"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "symbol",
               "outputs": [
                    {
                         "internalType": "string",
                         "name": "",
                         "type": "string"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "index",
                         "type": "uint256"
                    }
               ],
               "name": "tokenByIndex",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "owner",
                         "type": "address"
                    },
                    {
                         "internalType": "uint256",
                         "name": "index",
                         "type": "uint256"
                    }
               ],
               "name": "tokenOfOwnerByIndex",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "tokenURI",
               "outputs": [
                    {
                         "internalType": "string",
                         "name": "",
                         "type": "string"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "totalSupply",
               "outputs": [
                    {
                         "internalType": "uint256",
                         "name": "",
                         "type": "uint256"
                    }
               ],
               "stateMutability": "view",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "from",
                         "type": "address"
                    },
                    {
                         "internalType": "address",
                         "name": "to",
                         "type": "address"
                    },
                    {
                         "internalType": "uint256",
                         "name": "tokenId",
                         "type": "uint256"
                    }
               ],
               "name": "transferFrom",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [
                    {
                         "internalType": "address",
                         "name": "newOwner",
                         "type": "address"
                    }
               ],
               "name": "transferOwnership",
               "outputs": [],
               "stateMutability": "nonpayable",
               "type": "function"
          },
          {
               "inputs": [],
               "name": "withdraw",
               "outputs": [],
               "stateMutability": "payable",
               "type": "function"
          }
     ],
     "transactionHash": "0xea289585e43b913f3ec630bb08f46b54e9e41ade12138d1ea6dcea8b959d9799",
     "receipt": {
          "to": null,
          "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "transactionIndex": 0,
          "gasUsed": "3667019",
          "logsBloom": "0x
          "blockHash": "0xf6e16dc7213f29d72f251b26706d4bd4698e2032d87907c0d99db79dfea25f7a",
          "transactionHash": "0xea289585e43b913f3ec630bb08f46b54e9e41ade12138d1ea6dcea8b959d9799",
          "logs": [
               {
                    "transactionIndex": 0,
                    "blockNumber": 1,
                    "transactionHash": "0xea289585e43b913f3ec630bb08f46b54e9e41ade12138d1ea6dcea8b959d9799",
                    "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
                    "topics": [
                         "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                         "0x0000000000000000000000000000000000000000000000000000000000000000",
                         "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
                    ],
                    "data": "0x",
                    "logIndex": 0,
                    "blockHash": "0xf6e16dc7213f29d72f251b26706d4bd4698e2032d87907c0d99db79dfea25f7a"
               }
          ],
          "blockNumber": 1,
          "cumulativeGasUsed": "3667019",
          "status": 1,
          "byzantium": true
     },
     "args": ["ipfs://QmYkjcmHRdEHaVtvZNULCLt9VQBAGF4ESFHHxBEeEgLz1t/", "ipfs://test/"],
     "numDeployments": 1,
     "solcInputHash": "dc94da6f4a2bb3a46a4e91565abe39e6",
     "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initNotRevealedUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxSupply\",\"type\":\"uint256\"}],\"name\":\"setmaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sisco999\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A NFT Colection Minting Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to make a NFT minting website\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingDapp.sol\":\"MintingDapp\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MintingDapp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// 1. Pragma\\npragma solidity ^0.8.9;\\n// 2. Imports\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**@title A NFT Colection Minting Contract\\n * @author Sisco999\\n * @notice This contract is to make a NFT minting website\\n */\\n\\ncontract MintingDapp is ERC721Enumerable, Ownable {\\n     // Type Declarations\\n\\n     using Strings for uint256;\\n\\n     // State variables\\n     string private baseURI;\\n     string private i_baseExtension = \\\".json\\\";\\n     uint256 public s_cost = 5;\\n     uint256 public maxSupply = 22222;\\n     bool public revealed = false;\\n     uint256 public s_maxMintAmount = 222;\\n     string public notRevealedUri;\\n\\n     constructor(string memory _initBaseURI, string memory _initNotRevealedUri)\\n          ERC721(\\\"NFT_2XRobot\\\", \\\"2XR\\\")\\n     {\\n          setBaseURI(_initBaseURI);\\n          setNotRevealedURI(_initNotRevealedUri);\\n     }\\n\\n     // internal\\n     function _baseURI() internal view virtual override returns (string memory) {\\n          return baseURI;\\n     }\\n\\n     // public\\n     function mint(uint256 _mintAmount) public payable {\\n          uint256 s_supply = totalSupply();\\n          require(_mintAmount <= s_maxMintAmount);\\n          require((s_supply + _mintAmount <= maxSupply), \\\"Everythings as been minted! Sorry\\\");\\n\\n          if (msg.sender != owner()) {\\n               require(msg.value >= s_cost * _mintAmount, \\\"You need to spend more money\\\");\\n          }\\n\\n          for (uint256 i = 1; i <= _mintAmount; i++) {\\n               _safeMint(msg.sender, s_supply + i);\\n          }\\n     }\\n\\n     function walletOfOwner(address _owner) internal view returns (uint256[] memory) {\\n          uint256 ownerTokenCount = balanceOf(_owner);\\n          uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n          for (uint256 i; i < ownerTokenCount; i++) {\\n               tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n          }\\n          return tokenIds;\\n     }\\n\\n     function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n          require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n          if (revealed == false) {\\n               return notRevealedUri;\\n          }\\n\\n          string memory s_currentBaseURI = _baseURI();\\n          return\\n               bytes(s_currentBaseURI).length > 0\\n                    ? string(\\n                         abi.encodePacked(s_currentBaseURI, tokenId.toString(), i_baseExtension)\\n                    )\\n                    : \\\"\\\";\\n     }\\n\\n     //only owner\\n     function reveal() public onlyOwner {\\n          revealed = true;\\n     }\\n\\n     function setCost(uint256 _newCost) public onlyOwner {\\n          s_cost = _newCost;\\n     }\\n\\n     function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\n          s_maxMintAmount = _newmaxMintAmount;\\n     }\\n\\n     function setmaxSupply(uint256 _newmaxSupply) public onlyOwner {\\n          maxSupply = _newmaxSupply;\\n     }\\n\\n     function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\n          notRevealedUri = _notRevealedURI;\\n     }\\n\\n     function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n          baseURI = _newBaseURI;\\n     }\\n\\n     function getContractBalance() public view onlyOwner returns (uint256) {\\n          return address(this).balance;\\n     }\\n\\n     function withdraw() public payable onlyOwner {\\n          (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n          require(os);\\n     }\\n}\\n\",\"keccak256\":\"0x9354063898d4b921e91a1e2ecea7c407ffe8e334d55fa8f99cfa52f9d4c06bdb\",\"license\":\"MIT\"}},\"version\":1}",
     "bytecode": "0x60806040526040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600c9080519060200190620000519291906200037b565b506005600d556156ce600e556000600f60006101000a81548160ff02191690831515021790555060de6010553480156200008a57600080fd5b50604051620043dd380380620043dd8339818101604052810190620000b09190620005c8565b6040518060400160405280600b81526020017f4e46545f3258526f626f740000000000000000000000000000000000000000008152506040518060400160405280600381526020017f32585200000000000000000000000000000000000000000000000000000000008152508160009080519060200190620001349291906200037b565b5080600190805190602001906200014d9291906200037b565b50505062000170620001646200019a60201b60201c565b620001a260201b60201c565b62000181826200026860201b60201c565b62000192816200029460201b60201c565b505062000735565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b62000278620002c060201b60201c565b80600b9080519060200190620002909291906200037b565b5050565b620002a4620002c060201b60201c565b8060119080519060200190620002bc9291906200037b565b5050565b620002d06200019a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002f66200035160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200034f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034690620006ae565b60405180910390fd5b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8280546200038990620006ff565b90600052602060002090601f016020900481019282620003ad5760008555620003f9565b82601f10620003c857805160ff1916838001178555620003f9565b82800160010185558215620003f9579182015b82811115620003f8578251825591602001919060010190620003db565b5b5090506200040891906200040c565b5090565b5b80821115620004275760008160009055506001016200040d565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004948262000449565b810181811067ffffffffffffffff82111715620004b657620004b56200045a565b5b80604052505050565b6000620004cb6200042b565b9050620004d9828262000489565b919050565b600067ffffffffffffffff821115620004fc57620004fb6200045a565b5b620005078262000449565b9050602081019050919050565b60005b838110156200053457808201518184015260208101905062000517565b8381111562000544576000848401525b50505050565b6000620005616200055b84620004de565b620004bf565b90508281526020810184848401111562000580576200057f62000444565b5b6200058d84828562000514565b509392505050565b600082601f830112620005ad57620005ac6200043f565b5b8151620005bf8482602086016200054a565b91505092915050565b60008060408385031215620005e257620005e162000435565b5b600083015167ffffffffffffffff8111156200060357620006026200043a565b5b620006118582860162000595565b925050602083015167ffffffffffffffff8111156200063557620006346200043a565b5b620006438582860162000595565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620006966020836200064d565b9150620006a3826200065e565b602082019050919050565b60006020820190508181036000830152620006c98162000687565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200071857607f821691505b602082108114156200072f576200072e620006d0565b5b50919050565b613c9880620007456000396000f3fe6080604052600436106101ee5760003560e01c80636352211e1161010d578063a22cb465116100a0578063c87b56dd1161006f578063c87b56dd146106a9578063d5abeb01146106e6578063e985e9c514610711578063f2c4ce1e1461074e578063f2fde38b14610777576101ee565b8063a22cb46514610615578063a475b5dd1461063e578063af547af014610655578063b88d4fde14610680576101ee565b80637f00c7a6116100dc5780637f00c7a61461057a5780638da5cb5b146105a357806395d89b41146105ce578063a0712d68146105f9576101ee565b80636352211e146104be5780636f9fb98a146104fb57806370a0823114610526578063715018a614610563576101ee565b80632f745c59116101855780634b76d997116101545780634b76d997146104025780634f6ccce71461042d578063518302271461046a57806355f804b314610495576101ee565b80632f745c59146103695780633ccfd60b146103a657806342842e0e146103b057806344a0d68a146103d9576101ee565b8063095ea7b3116101c1578063095ea7b3146102c357806318160ddd146102ec578063228025e81461031757806323b872dd14610340576101ee565b806301ffc9a7146101f357806306fdde0314610230578063081812fc1461025b578063081c8c4414610298575b600080fd5b3480156101ff57600080fd5b5061021a600480360381019061021591906127eb565b6107a0565b6040516102279190612833565b60405180910390f35b34801561023c57600080fd5b5061024561081a565b60405161025291906128e7565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d919061293f565b6108ac565b60405161028f91906129ad565b60405180910390f35b3480156102a457600080fd5b506102ad6108f2565b6040516102ba91906128e7565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e591906129f4565b610980565b005b3480156102f857600080fd5b50610301610a98565b60405161030e9190612a43565b60405180910390f35b34801561032357600080fd5b5061033e6004803603810190610339919061293f565b610aa5565b005b34801561034c57600080fd5b5061036760048036038101906103629190612a5e565b610ab7565b005b34801561037557600080fd5b50610390600480360381019061038b91906129f4565b610b17565b60405161039d9190612a43565b60405180910390f35b6103ae610bbc565b005b3480156103bc57600080fd5b506103d760048036038101906103d29190612a5e565b610c44565b005b3480156103e557600080fd5b5061040060048036038101906103fb919061293f565b610c64565b005b34801561040e57600080fd5b50610417610c76565b6040516104249190612a43565b60405180910390f35b34801561043957600080fd5b50610454600480360381019061044f919061293f565b610c7c565b6040516104619190612a43565b60405180910390f35b34801561047657600080fd5b5061047f610ced565b60405161048c9190612833565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190612be6565b610d00565b005b3480156104ca57600080fd5b506104e560048036038101906104e0919061293f565b610d22565b6040516104f291906129ad565b60405180910390f35b34801561050757600080fd5b50610510610dd4565b60405161051d9190612a43565b60405180910390f35b34801561053257600080fd5b5061054d60048036038101906105489190612c2f565b610de4565b60405161055a9190612a43565b60405180910390f35b34801561056f57600080fd5b50610578610e9c565b005b34801561058657600080fd5b506105a1600480360381019061059c919061293f565b610eb0565b005b3480156105af57600080fd5b506105b8610ec2565b6040516105c591906129ad565b60405180910390f35b3480156105da57600080fd5b506105e3610eec565b6040516105f091906128e7565b60405180910390f35b610613600480360381019061060e919061293f565b610f7e565b005b34801561062157600080fd5b5061063c60048036038101906106379190612c88565b6110af565b005b34801561064a57600080fd5b506106536110c5565b005b34801561066157600080fd5b5061066a6110ea565b6040516106779190612a43565b60405180910390f35b34801561068c57600080fd5b506106a760048036038101906106a29190612d69565b6110f0565b005b3480156106b557600080fd5b506106d060048036038101906106cb919061293f565b611152565b6040516106dd91906128e7565b60405180910390f35b3480156106f257600080fd5b506106fb6112ab565b6040516107089190612a43565b60405180910390f35b34801561071d57600080fd5b5061073860048036038101906107339190612dec565b6112b1565b6040516107459190612833565b60405180910390f35b34801561075a57600080fd5b5061077560048036038101906107709190612be6565b611345565b005b34801561078357600080fd5b5061079e60048036038101906107999190612c2f565b611367565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108135750610812826113eb565b5b9050919050565b60606000805461082990612e5b565b80601f016020809104026020016040519081016040528092919081815260200182805461085590612e5b565b80156108a25780601f10610877576101008083540402835291602001916108a2565b820191906000526020600020905b81548152906001019060200180831161088557829003601f168201915b5050505050905090565b60006108b7826114cd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b601180546108ff90612e5b565b80601f016020809104026020016040519081016040528092919081815260200182805461092b90612e5b565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b505050505081565b600061098b82610d22565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f390612eff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a1b611518565b73ffffffffffffffffffffffffffffffffffffffff161480610a4a5750610a4981610a44611518565b6112b1565b5b610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8090612f91565b60405180910390fd5b610a938383611520565b505050565b6000600880549050905090565b610aad6115d9565b80600e8190555050565b610ac8610ac2611518565b82611657565b610b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe90613023565b60405180910390fd5b610b128383836116ec565b505050565b6000610b2283610de4565b8210610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a906130b5565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610bc46115d9565b6000610bce610ec2565b73ffffffffffffffffffffffffffffffffffffffff1647604051610bf190613106565b60006040518083038185875af1925050503d8060008114610c2e576040519150601f19603f3d011682016040523d82523d6000602084013e610c33565b606091505b5050905080610c4157600080fd5b50565b610c5f838383604051806020016040528060008152506110f0565b505050565b610c6c6115d9565b80600d8190555050565b60105481565b6000610c86610a98565b8210610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe9061318d565b60405180910390fd5b60088281548110610cdb57610cda6131ad565b5b90600052602060002001549050919050565b600f60009054906101000a900460ff1681565b610d086115d9565b80600b9080519060200190610d1e9291906126dc565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc290613228565b60405180910390fd5b80915050919050565b6000610dde6115d9565b47905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c906132ba565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ea46115d9565b610eae6000611953565b565b610eb86115d9565b8060108190555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610efb90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2790612e5b565b8015610f745780601f10610f4957610100808354040283529160200191610f74565b820191906000526020600020905b815481529060010190602001808311610f5757829003601f168201915b5050505050905090565b6000610f88610a98565b9050601054821115610f9957600080fd5b600e548282610fa89190613309565b1115610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe0906133d1565b60405180910390fd5b610ff1610ec2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110745781600d5461103191906133f1565b341015611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90613497565b60405180910390fd5b5b6000600190505b8281116110aa576110973382846110929190613309565b611a19565b80806110a2906134b7565b91505061107b565b505050565b6110c16110ba611518565b8383611a37565b5050565b6110cd6115d9565b6001600f60006101000a81548160ff021916908315150217905550565b600d5481565b6111016110fb611518565b83611657565b611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790613023565b60405180910390fd5b61114c84848484611ba4565b50505050565b606061115d82611c00565b61119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119390613572565b60405180910390fd5b60001515600f60009054906101000a900460ff161515141561124a57601180546111c590612e5b565b80601f01602080910402602001604051908101604052809291908181526020018280546111f190612e5b565b801561123e5780601f106112135761010080835404028352916020019161123e565b820191906000526020600020905b81548152906001019060200180831161122157829003601f168201915b505050505090506112a6565b6000611254611c6c565b9050600081511161127457604051806020016040528060008152506112a2565b8061127e84611cfe565b600c60405160200161129293929190613662565b6040516020818303038152906040525b9150505b919050565b600e5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61134d6115d9565b80601190805190602001906113639291906126dc565b5050565b61136f6115d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d690613705565b60405180910390fd5b6113e881611953565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806114b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806114c657506114c582611e5f565b5b9050919050565b6114d681611c00565b611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c90613228565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661159383610d22565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6115e1611518565b73ffffffffffffffffffffffffffffffffffffffff166115ff610ec2565b73ffffffffffffffffffffffffffffffffffffffff1614611655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c90613771565b60405180910390fd5b565b60008061166383610d22565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116a557506116a481856112b1565b5b806116e357508373ffffffffffffffffffffffffffffffffffffffff166116cb846108ac565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661170c82610d22565b73ffffffffffffffffffffffffffffffffffffffff1614611762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175990613803565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c990613895565b60405180910390fd5b6117dd838383611ec9565b6117e8600082611520565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461183891906138b5565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461188f9190613309565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461194e838383611fdd565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611a33828260405180602001604052806000815250611fe2565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9d90613935565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b979190612833565b60405180910390a3505050565b611baf8484846116ec565b611bbb8484848461203d565b611bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf1906139c7565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600b8054611c7b90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca790612e5b565b8015611cf45780601f10611cc957610100808354040283529160200191611cf4565b820191906000526020600020905b815481529060010190602001808311611cd757829003601f168201915b5050505050905090565b60606000821415611d46576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e5a565b600082905060005b60008214611d78578080611d61906134b7565b915050600a82611d719190613a16565b9150611d4e565b60008167ffffffffffffffff811115611d9457611d93612abb565b5b6040519080825280601f01601f191660200182016040528015611dc65781602001600182028036833780820191505090505b5090505b60008514611e5357600182611ddf91906138b5565b9150600a85611dee9190613a47565b6030611dfa9190613309565b60f81b818381518110611e1057611e0f6131ad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e4c9190613a16565b9450611dca565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611ed48383836121d4565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f1757611f12816121d9565b611f56565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611f5557611f548382612222565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f9957611f948161238f565b611fd8565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611fd757611fd68282612460565b5b5b505050565b505050565b611fec83836124df565b611ff9600084848461203d565b612038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202f906139c7565b60405180910390fd5b505050565b600061205e8473ffffffffffffffffffffffffffffffffffffffff166126b9565b156121c7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612087611518565b8786866040518563ffffffff1660e01b81526004016120a99493929190613acd565b602060405180830381600087803b1580156120c357600080fd5b505af19250505080156120f457506040513d601f19601f820116820180604052508101906120f19190613b2e565b60015b612177573d8060008114612124576040519150601f19603f3d011682016040523d82523d6000602084013e612129565b606091505b5060008151141561216f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612166906139c7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506121cc565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161222f84610de4565b61223991906138b5565b905060006007600084815260200190815260200160002054905081811461231e576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506123a391906138b5565b90506000600960008481526020019081526020016000205490506000600883815481106123d3576123d26131ad565b5b9060005260206000200154905080600883815481106123f5576123f46131ad565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061244457612443613b5b565b5b6001900381819060005260206000200160009055905550505050565b600061246b83610de4565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561254f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254690613bd6565b60405180910390fd5b61255881611c00565b15612598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258f90613c42565b60405180910390fd5b6125a460008383611ec9565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125f49190613309565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46126b560008383611fdd565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546126e890612e5b565b90600052602060002090601f01602090048101928261270a5760008555612751565b82601f1061272357805160ff1916838001178555612751565b82800160010185558215612751579182015b82811115612750578251825591602001919060010190612735565b5b50905061275e9190612762565b5090565b5b8082111561277b576000816000905550600101612763565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127c881612793565b81146127d357600080fd5b50565b6000813590506127e5816127bf565b92915050565b60006020828403121561280157612800612789565b5b600061280f848285016127d6565b91505092915050565b60008115159050919050565b61282d81612818565b82525050565b60006020820190506128486000830184612824565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561288857808201518184015260208101905061286d565b83811115612897576000848401525b50505050565b6000601f19601f8301169050919050565b60006128b98261284e565b6128c38185612859565b93506128d381856020860161286a565b6128dc8161289d565b840191505092915050565b6000602082019050818103600083015261290181846128ae565b905092915050565b6000819050919050565b61291c81612909565b811461292757600080fd5b50565b60008135905061293981612913565b92915050565b60006020828403121561295557612954612789565b5b60006129638482850161292a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129978261296c565b9050919050565b6129a78161298c565b82525050565b60006020820190506129c2600083018461299e565b92915050565b6129d18161298c565b81146129dc57600080fd5b50565b6000813590506129ee816129c8565b92915050565b60008060408385031215612a0b57612a0a612789565b5b6000612a19858286016129df565b9250506020612a2a8582860161292a565b9150509250929050565b612a3d81612909565b82525050565b6000602082019050612a586000830184612a34565b92915050565b600080600060608486031215612a7757612a76612789565b5b6000612a85868287016129df565b9350506020612a96868287016129df565b9250506040612aa78682870161292a565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612af38261289d565b810181811067ffffffffffffffff82111715612b1257612b11612abb565b5b80604052505050565b6000612b2561277f565b9050612b318282612aea565b919050565b600067ffffffffffffffff821115612b5157612b50612abb565b5b612b5a8261289d565b9050602081019050919050565b82818337600083830152505050565b6000612b89612b8484612b36565b612b1b565b905082815260208101848484011115612ba557612ba4612ab6565b5b612bb0848285612b67565b509392505050565b600082601f830112612bcd57612bcc612ab1565b5b8135612bdd848260208601612b76565b91505092915050565b600060208284031215612bfc57612bfb612789565b5b600082013567ffffffffffffffff811115612c1a57612c1961278e565b5b612c2684828501612bb8565b91505092915050565b600060208284031215612c4557612c44612789565b5b6000612c53848285016129df565b91505092915050565b612c6581612818565b8114612c7057600080fd5b50565b600081359050612c8281612c5c565b92915050565b60008060408385031215612c9f57612c9e612789565b5b6000612cad858286016129df565b9250506020612cbe85828601612c73565b9150509250929050565b600067ffffffffffffffff821115612ce357612ce2612abb565b5b612cec8261289d565b9050602081019050919050565b6000612d0c612d0784612cc8565b612b1b565b905082815260208101848484011115612d2857612d27612ab6565b5b612d33848285612b67565b509392505050565b600082601f830112612d5057612d4f612ab1565b5b8135612d60848260208601612cf9565b91505092915050565b60008060008060808587031215612d8357612d82612789565b5b6000612d91878288016129df565b9450506020612da2878288016129df565b9350506040612db38782880161292a565b925050606085013567ffffffffffffffff811115612dd457612dd361278e565b5b612de087828801612d3b565b91505092959194509250565b60008060408385031215612e0357612e02612789565b5b6000612e11858286016129df565b9250506020612e22858286016129df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e7357607f821691505b60208210811415612e8757612e86612e2c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ee9602183612859565b9150612ef482612e8d565b604082019050919050565b60006020820190508181036000830152612f1881612edc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612f7b603e83612859565b9150612f8682612f1f565b604082019050919050565b60006020820190508181036000830152612faa81612f6e565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b600061300d602e83612859565b915061301882612fb1565b604082019050919050565b6000602082019050818103600083015261303c81613000565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b600061309f602b83612859565b91506130aa82613043565b604082019050919050565b600060208201905081810360008301526130ce81613092565b9050919050565b600081905092915050565b50565b60006130f06000836130d5565b91506130fb826130e0565b600082019050919050565b6000613111826130e3565b9150819050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613177602c83612859565b91506131828261311b565b604082019050919050565b600060208201905081810360008301526131a68161316a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613212601883612859565b915061321d826131dc565b602082019050919050565b6000602082019050818103600083015261324181613205565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006132a4602983612859565b91506132af82613248565b604082019050919050565b600060208201905081810360008301526132d381613297565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061331482612909565b915061331f83612909565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613354576133536132da565b5b828201905092915050565b7f45766572797468696e6773206173206265656e206d696e7465642120536f727260008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b60006133bb602183612859565b91506133c68261335f565b604082019050919050565b600060208201905081810360008301526133ea816133ae565b9050919050565b60006133fc82612909565b915061340783612909565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134405761343f6132da565b5b828202905092915050565b7f596f75206e65656420746f207370656e64206d6f7265206d6f6e657900000000600082015250565b6000613481601c83612859565b915061348c8261344b565b602082019050919050565b600060208201905081810360008301526134b081613474565b9050919050565b60006134c282612909565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134f5576134f46132da565b5b600182019050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061355c602f83612859565b915061356782613500565b604082019050919050565b6000602082019050818103600083015261358b8161354f565b9050919050565b600081905092915050565b60006135a88261284e565b6135b28185613592565b93506135c281856020860161286a565b80840191505092915050565b60008190508160005260206000209050919050565b600081546135f081612e5b565b6135fa8186613592565b94506001821660008114613615576001811461362657613659565b60ff19831686528186019350613659565b61362f856135ce565b60005b8381101561365157815481890152600182019150602081019050613632565b838801955050505b50505092915050565b600061366e828661359d565b915061367a828561359d565b915061368682846135e3565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006136ef602683612859565b91506136fa82613693565b604082019050919050565b6000602082019050818103600083015261371e816136e2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061375b602083612859565b915061376682613725565b602082019050919050565b6000602082019050818103600083015261378a8161374e565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006137ed602583612859565b91506137f882613791565b604082019050919050565b6000602082019050818103600083015261381c816137e0565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061387f602483612859565b915061388a82613823565b604082019050919050565b600060208201905081810360008301526138ae81613872565b9050919050565b60006138c082612909565b91506138cb83612909565b9250828210156138de576138dd6132da565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061391f601983612859565b915061392a826138e9565b602082019050919050565b6000602082019050818103600083015261394e81613912565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006139b1603283612859565b91506139bc82613955565b604082019050919050565b600060208201905081810360008301526139e0816139a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a2182612909565b9150613a2c83612909565b925082613a3c57613a3b6139e7565b5b828204905092915050565b6000613a5282612909565b9150613a5d83612909565b925082613a6d57613a6c6139e7565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000613a9f82613a78565b613aa98185613a83565b9350613ab981856020860161286a565b613ac28161289d565b840191505092915050565b6000608082019050613ae2600083018761299e565b613aef602083018661299e565b613afc6040830185612a34565b8181036060830152613b0e8184613a94565b905095945050505050565b600081519050613b28816127bf565b92915050565b600060208284031215613b4457613b43612789565b5b6000613b5284828501613b19565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613bc0602083612859565b9150613bcb82613b8a565b602082019050919050565b60006020820190508181036000830152613bef81613bb3565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613c2c601c83612859565b9150613c3782613bf6565b602082019050919050565b60006020820190508181036000830152613c5b81613c1f565b905091905056fea2646970667358221220809e04b862eae09ba5df4815e902fe8e27ab7ce4595ebe28fa72e16b2c39e64464736f6c63430008090033",
     "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80636352211e1161010d578063a22cb465116100a0578063c87b56dd1161006f578063c87b56dd146106a9578063d5abeb01146106e6578063e985e9c514610711578063f2c4ce1e1461074e578063f2fde38b14610777576101ee565b8063a22cb46514610615578063a475b5dd1461063e578063af547af014610655578063b88d4fde14610680576101ee565b80637f00c7a6116100dc5780637f00c7a61461057a5780638da5cb5b146105a357806395d89b41146105ce578063a0712d68146105f9576101ee565b80636352211e146104be5780636f9fb98a146104fb57806370a0823114610526578063715018a614610563576101ee565b80632f745c59116101855780634b76d997116101545780634b76d997146104025780634f6ccce71461042d578063518302271461046a57806355f804b314610495576101ee565b80632f745c59146103695780633ccfd60b146103a657806342842e0e146103b057806344a0d68a146103d9576101ee565b8063095ea7b3116101c1578063095ea7b3146102c357806318160ddd146102ec578063228025e81461031757806323b872dd14610340576101ee565b806301ffc9a7146101f357806306fdde0314610230578063081812fc1461025b578063081c8c4414610298575b600080fd5b3480156101ff57600080fd5b5061021a600480360381019061021591906127eb565b6107a0565b6040516102279190612833565b60405180910390f35b34801561023c57600080fd5b5061024561081a565b60405161025291906128e7565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d919061293f565b6108ac565b60405161028f91906129ad565b60405180910390f35b3480156102a457600080fd5b506102ad6108f2565b6040516102ba91906128e7565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e591906129f4565b610980565b005b3480156102f857600080fd5b50610301610a98565b60405161030e9190612a43565b60405180910390f35b34801561032357600080fd5b5061033e6004803603810190610339919061293f565b610aa5565b005b34801561034c57600080fd5b5061036760048036038101906103629190612a5e565b610ab7565b005b34801561037557600080fd5b50610390600480360381019061038b91906129f4565b610b17565b60405161039d9190612a43565b60405180910390f35b6103ae610bbc565b005b3480156103bc57600080fd5b506103d760048036038101906103d29190612a5e565b610c44565b005b3480156103e557600080fd5b5061040060048036038101906103fb919061293f565b610c64565b005b34801561040e57600080fd5b50610417610c76565b6040516104249190612a43565b60405180910390f35b34801561043957600080fd5b50610454600480360381019061044f919061293f565b610c7c565b6040516104619190612a43565b60405180910390f35b34801561047657600080fd5b5061047f610ced565b60405161048c9190612833565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190612be6565b610d00565b005b3480156104ca57600080fd5b506104e560048036038101906104e0919061293f565b610d22565b6040516104f291906129ad565b60405180910390f35b34801561050757600080fd5b50610510610dd4565b60405161051d9190612a43565b60405180910390f35b34801561053257600080fd5b5061054d60048036038101906105489190612c2f565b610de4565b60405161055a9190612a43565b60405180910390f35b34801561056f57600080fd5b50610578610e9c565b005b34801561058657600080fd5b506105a1600480360381019061059c919061293f565b610eb0565b005b3480156105af57600080fd5b506105b8610ec2565b6040516105c591906129ad565b60405180910390f35b3480156105da57600080fd5b506105e3610eec565b6040516105f091906128e7565b60405180910390f35b610613600480360381019061060e919061293f565b610f7e565b005b34801561062157600080fd5b5061063c60048036038101906106379190612c88565b6110af565b005b34801561064a57600080fd5b506106536110c5565b005b34801561066157600080fd5b5061066a6110ea565b6040516106779190612a43565b60405180910390f35b34801561068c57600080fd5b506106a760048036038101906106a29190612d69565b6110f0565b005b3480156106b557600080fd5b506106d060048036038101906106cb919061293f565b611152565b6040516106dd91906128e7565b60405180910390f35b3480156106f257600080fd5b506106fb6112ab565b6040516107089190612a43565b60405180910390f35b34801561071d57600080fd5b5061073860048036038101906107339190612dec565b6112b1565b6040516107459190612833565b60405180910390f35b34801561075a57600080fd5b5061077560048036038101906107709190612be6565b611345565b005b34801561078357600080fd5b5061079e60048036038101906107999190612c2f565b611367565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108135750610812826113eb565b5b9050919050565b60606000805461082990612e5b565b80601f016020809104026020016040519081016040528092919081815260200182805461085590612e5b565b80156108a25780601f10610877576101008083540402835291602001916108a2565b820191906000526020600020905b81548152906001019060200180831161088557829003601f168201915b5050505050905090565b60006108b7826114cd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b601180546108ff90612e5b565b80601f016020809104026020016040519081016040528092919081815260200182805461092b90612e5b565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b505050505081565b600061098b82610d22565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f390612eff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a1b611518565b73ffffffffffffffffffffffffffffffffffffffff161480610a4a5750610a4981610a44611518565b6112b1565b5b610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8090612f91565b60405180910390fd5b610a938383611520565b505050565b6000600880549050905090565b610aad6115d9565b80600e8190555050565b610ac8610ac2611518565b82611657565b610b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe90613023565b60405180910390fd5b610b128383836116ec565b505050565b6000610b2283610de4565b8210610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a906130b5565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610bc46115d9565b6000610bce610ec2565b73ffffffffffffffffffffffffffffffffffffffff1647604051610bf190613106565b60006040518083038185875af1925050503d8060008114610c2e576040519150601f19603f3d011682016040523d82523d6000602084013e610c33565b606091505b5050905080610c4157600080fd5b50565b610c5f838383604051806020016040528060008152506110f0565b505050565b610c6c6115d9565b80600d8190555050565b60105481565b6000610c86610a98565b8210610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe9061318d565b60405180910390fd5b60088281548110610cdb57610cda6131ad565b5b90600052602060002001549050919050565b600f60009054906101000a900460ff1681565b610d086115d9565b80600b9080519060200190610d1e9291906126dc565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc290613228565b60405180910390fd5b80915050919050565b6000610dde6115d9565b47905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c906132ba565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ea46115d9565b610eae6000611953565b565b610eb86115d9565b8060108190555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610efb90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2790612e5b565b8015610f745780601f10610f4957610100808354040283529160200191610f74565b820191906000526020600020905b815481529060010190602001808311610f5757829003601f168201915b5050505050905090565b6000610f88610a98565b9050601054821115610f9957600080fd5b600e548282610fa89190613309565b1115610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe0906133d1565b60405180910390fd5b610ff1610ec2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110745781600d5461103191906133f1565b341015611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90613497565b60405180910390fd5b5b6000600190505b8281116110aa576110973382846110929190613309565b611a19565b80806110a2906134b7565b91505061107b565b505050565b6110c16110ba611518565b8383611a37565b5050565b6110cd6115d9565b6001600f60006101000a81548160ff021916908315150217905550565b600d5481565b6111016110fb611518565b83611657565b611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790613023565b60405180910390fd5b61114c84848484611ba4565b50505050565b606061115d82611c00565b61119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119390613572565b60405180910390fd5b60001515600f60009054906101000a900460ff161515141561124a57601180546111c590612e5b565b80601f01602080910402602001604051908101604052809291908181526020018280546111f190612e5b565b801561123e5780601f106112135761010080835404028352916020019161123e565b820191906000526020600020905b81548152906001019060200180831161122157829003601f168201915b505050505090506112a6565b6000611254611c6c565b9050600081511161127457604051806020016040528060008152506112a2565b8061127e84611cfe565b600c60405160200161129293929190613662565b6040516020818303038152906040525b9150505b919050565b600e5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61134d6115d9565b80601190805190602001906113639291906126dc565b5050565b61136f6115d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d690613705565b60405180910390fd5b6113e881611953565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806114b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806114c657506114c582611e5f565b5b9050919050565b6114d681611c00565b611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c90613228565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661159383610d22565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6115e1611518565b73ffffffffffffffffffffffffffffffffffffffff166115ff610ec2565b73ffffffffffffffffffffffffffffffffffffffff1614611655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c90613771565b60405180910390fd5b565b60008061166383610d22565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116a557506116a481856112b1565b5b806116e357508373ffffffffffffffffffffffffffffffffffffffff166116cb846108ac565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661170c82610d22565b73ffffffffffffffffffffffffffffffffffffffff1614611762576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175990613803565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c990613895565b60405180910390fd5b6117dd838383611ec9565b6117e8600082611520565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461183891906138b5565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461188f9190613309565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461194e838383611fdd565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611a33828260405180602001604052806000815250611fe2565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9d90613935565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b979190612833565b60405180910390a3505050565b611baf8484846116ec565b611bbb8484848461203d565b611bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf1906139c7565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600b8054611c7b90612e5b565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca790612e5b565b8015611cf45780601f10611cc957610100808354040283529160200191611cf4565b820191906000526020600020905b815481529060010190602001808311611cd757829003601f168201915b5050505050905090565b60606000821415611d46576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e5a565b600082905060005b60008214611d78578080611d61906134b7565b915050600a82611d719190613a16565b9150611d4e565b60008167ffffffffffffffff811115611d9457611d93612abb565b5b6040519080825280601f01601f191660200182016040528015611dc65781602001600182028036833780820191505090505b5090505b60008514611e5357600182611ddf91906138b5565b9150600a85611dee9190613a47565b6030611dfa9190613309565b60f81b818381518110611e1057611e0f6131ad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e4c9190613a16565b9450611dca565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611ed48383836121d4565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f1757611f12816121d9565b611f56565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611f5557611f548382612222565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f9957611f948161238f565b611fd8565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611fd757611fd68282612460565b5b5b505050565b505050565b611fec83836124df565b611ff9600084848461203d565b612038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202f906139c7565b60405180910390fd5b505050565b600061205e8473ffffffffffffffffffffffffffffffffffffffff166126b9565b156121c7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612087611518565b8786866040518563ffffffff1660e01b81526004016120a99493929190613acd565b602060405180830381600087803b1580156120c357600080fd5b505af19250505080156120f457506040513d601f19601f820116820180604052508101906120f19190613b2e565b60015b612177573d8060008114612124576040519150601f19603f3d011682016040523d82523d6000602084013e612129565b606091505b5060008151141561216f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612166906139c7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506121cc565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161222f84610de4565b61223991906138b5565b905060006007600084815260200190815260200160002054905081811461231e576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506123a391906138b5565b90506000600960008481526020019081526020016000205490506000600883815481106123d3576123d26131ad565b5b9060005260206000200154905080600883815481106123f5576123f46131ad565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061244457612443613b5b565b5b6001900381819060005260206000200160009055905550505050565b600061246b83610de4565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561254f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254690613bd6565b60405180910390fd5b61255881611c00565b15612598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258f90613c42565b60405180910390fd5b6125a460008383611ec9565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125f49190613309565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46126b560008383611fdd565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546126e890612e5b565b90600052602060002090601f01602090048101928261270a5760008555612751565b82601f1061272357805160ff1916838001178555612751565b82800160010185558215612751579182015b82811115612750578251825591602001919060010190612735565b5b50905061275e9190612762565b5090565b5b8082111561277b576000816000905550600101612763565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127c881612793565b81146127d357600080fd5b50565b6000813590506127e5816127bf565b92915050565b60006020828403121561280157612800612789565b5b600061280f848285016127d6565b91505092915050565b60008115159050919050565b61282d81612818565b82525050565b60006020820190506128486000830184612824565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561288857808201518184015260208101905061286d565b83811115612897576000848401525b50505050565b6000601f19601f8301169050919050565b60006128b98261284e565b6128c38185612859565b93506128d381856020860161286a565b6128dc8161289d565b840191505092915050565b6000602082019050818103600083015261290181846128ae565b905092915050565b6000819050919050565b61291c81612909565b811461292757600080fd5b50565b60008135905061293981612913565b92915050565b60006020828403121561295557612954612789565b5b60006129638482850161292a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129978261296c565b9050919050565b6129a78161298c565b82525050565b60006020820190506129c2600083018461299e565b92915050565b6129d18161298c565b81146129dc57600080fd5b50565b6000813590506129ee816129c8565b92915050565b60008060408385031215612a0b57612a0a612789565b5b6000612a19858286016129df565b9250506020612a2a8582860161292a565b9150509250929050565b612a3d81612909565b82525050565b6000602082019050612a586000830184612a34565b92915050565b600080600060608486031215612a7757612a76612789565b5b6000612a85868287016129df565b9350506020612a96868287016129df565b9250506040612aa78682870161292a565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612af38261289d565b810181811067ffffffffffffffff82111715612b1257612b11612abb565b5b80604052505050565b6000612b2561277f565b9050612b318282612aea565b919050565b600067ffffffffffffffff821115612b5157612b50612abb565b5b612b5a8261289d565b9050602081019050919050565b82818337600083830152505050565b6000612b89612b8484612b36565b612b1b565b905082815260208101848484011115612ba557612ba4612ab6565b5b612bb0848285612b67565b509392505050565b600082601f830112612bcd57612bcc612ab1565b5b8135612bdd848260208601612b76565b91505092915050565b600060208284031215612bfc57612bfb612789565b5b600082013567ffffffffffffffff811115612c1a57612c1961278e565b5b612c2684828501612bb8565b91505092915050565b600060208284031215612c4557612c44612789565b5b6000612c53848285016129df565b91505092915050565b612c6581612818565b8114612c7057600080fd5b50565b600081359050612c8281612c5c565b92915050565b60008060408385031215612c9f57612c9e612789565b5b6000612cad858286016129df565b9250506020612cbe85828601612c73565b9150509250929050565b600067ffffffffffffffff821115612ce357612ce2612abb565b5b612cec8261289d565b9050602081019050919050565b6000612d0c612d0784612cc8565b612b1b565b905082815260208101848484011115612d2857612d27612ab6565b5b612d33848285612b67565b509392505050565b600082601f830112612d5057612d4f612ab1565b5b8135612d60848260208601612cf9565b91505092915050565b60008060008060808587031215612d8357612d82612789565b5b6000612d91878288016129df565b9450506020612da2878288016129df565b9350506040612db38782880161292a565b925050606085013567ffffffffffffffff811115612dd457612dd361278e565b5b612de087828801612d3b565b91505092959194509250565b60008060408385031215612e0357612e02612789565b5b6000612e11858286016129df565b9250506020612e22858286016129df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e7357607f821691505b60208210811415612e8757612e86612e2c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ee9602183612859565b9150612ef482612e8d565b604082019050919050565b60006020820190508181036000830152612f1881612edc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612f7b603e83612859565b9150612f8682612f1f565b604082019050919050565b60006020820190508181036000830152612faa81612f6e565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b600061300d602e83612859565b915061301882612fb1565b604082019050919050565b6000602082019050818103600083015261303c81613000565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b600061309f602b83612859565b91506130aa82613043565b604082019050919050565b600060208201905081810360008301526130ce81613092565b9050919050565b600081905092915050565b50565b60006130f06000836130d5565b91506130fb826130e0565b600082019050919050565b6000613111826130e3565b9150819050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613177602c83612859565b91506131828261311b565b604082019050919050565b600060208201905081810360008301526131a68161316a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613212601883612859565b915061321d826131dc565b602082019050919050565b6000602082019050818103600083015261324181613205565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006132a4602983612859565b91506132af82613248565b604082019050919050565b600060208201905081810360008301526132d381613297565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061331482612909565b915061331f83612909565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613354576133536132da565b5b828201905092915050565b7f45766572797468696e6773206173206265656e206d696e7465642120536f727260008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b60006133bb602183612859565b91506133c68261335f565b604082019050919050565b600060208201905081810360008301526133ea816133ae565b9050919050565b60006133fc82612909565b915061340783612909565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134405761343f6132da565b5b828202905092915050565b7f596f75206e65656420746f207370656e64206d6f7265206d6f6e657900000000600082015250565b6000613481601c83612859565b915061348c8261344b565b602082019050919050565b600060208201905081810360008301526134b081613474565b9050919050565b60006134c282612909565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134f5576134f46132da565b5b600182019050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061355c602f83612859565b915061356782613500565b604082019050919050565b6000602082019050818103600083015261358b8161354f565b9050919050565b600081905092915050565b60006135a88261284e565b6135b28185613592565b93506135c281856020860161286a565b80840191505092915050565b60008190508160005260206000209050919050565b600081546135f081612e5b565b6135fa8186613592565b94506001821660008114613615576001811461362657613659565b60ff19831686528186019350613659565b61362f856135ce565b60005b8381101561365157815481890152600182019150602081019050613632565b838801955050505b50505092915050565b600061366e828661359d565b915061367a828561359d565b915061368682846135e3565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006136ef602683612859565b91506136fa82613693565b604082019050919050565b6000602082019050818103600083015261371e816136e2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061375b602083612859565b915061376682613725565b602082019050919050565b6000602082019050818103600083015261378a8161374e565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006137ed602583612859565b91506137f882613791565b604082019050919050565b6000602082019050818103600083015261381c816137e0565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061387f602483612859565b915061388a82613823565b604082019050919050565b600060208201905081810360008301526138ae81613872565b9050919050565b60006138c082612909565b91506138cb83612909565b9250828210156138de576138dd6132da565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061391f601983612859565b915061392a826138e9565b602082019050919050565b6000602082019050818103600083015261394e81613912565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006139b1603283612859565b91506139bc82613955565b604082019050919050565b600060208201905081810360008301526139e0816139a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a2182612909565b9150613a2c83612909565b925082613a3c57613a3b6139e7565b5b828204905092915050565b6000613a5282612909565b9150613a5d83612909565b925082613a6d57613a6c6139e7565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000613a9f82613a78565b613aa98185613a83565b9350613ab981856020860161286a565b613ac28161289d565b840191505092915050565b6000608082019050613ae2600083018761299e565b613aef602083018661299e565b613afc6040830185612a34565b8181036060830152613b0e8184613a94565b905095945050505050565b600081519050613b28816127bf565b92915050565b600060208284031215613b4457613b43612789565b5b6000613b5284828501613b19565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613bc0602083612859565b9150613bcb82613b8a565b602082019050919050565b60006020820190508181036000830152613bef81613bb3565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613c2c601c83612859565b9150613c3782613bf6565b602082019050919050565b60006020820190508181036000830152613c5b81613c1f565b905091905056fea2646970667358221220809e04b862eae09ba5df4815e902fe8e27ab7ce4595ebe28fa72e16b2c39e64464736f6c63430008090033",
     "devdoc": {
          "author": "Sisco999",
          "kind": "dev",
          "methods": {
               "approve(address,uint256)": {
                    "details": "See {IERC721-approve}."
               },
               "balanceOf(address)": {
                    "details": "See {IERC721-balanceOf}."
               },
               "getApproved(uint256)": {
                    "details": "See {IERC721-getApproved}."
               },
               "isApprovedForAll(address,address)": {
                    "details": "See {IERC721-isApprovedForAll}."
               },
               "name()": {
                    "details": "See {IERC721Metadata-name}."
               },
               "owner()": {
                    "details": "Returns the address of the current owner."
               },
               "ownerOf(uint256)": {
                    "details": "See {IERC721-ownerOf}."
               },
               "renounceOwnership()": {
                    "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
               },
               "safeTransferFrom(address,address,uint256)": {
                    "details": "See {IERC721-safeTransferFrom}."
               },
               "safeTransferFrom(address,address,uint256,bytes)": {
                    "details": "See {IERC721-safeTransferFrom}."
               },
               "setApprovalForAll(address,bool)": {
                    "details": "See {IERC721-setApprovalForAll}."
               },
               "supportsInterface(bytes4)": {
                    "details": "See {IERC165-supportsInterface}."
               },
               "symbol()": {
                    "details": "See {IERC721Metadata-symbol}."
               },
               "tokenByIndex(uint256)": {
                    "details": "See {IERC721Enumerable-tokenByIndex}."
               },
               "tokenOfOwnerByIndex(address,uint256)": {
                    "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
               },
               "tokenURI(uint256)": {
                    "details": "See {IERC721Metadata-tokenURI}."
               },
               "totalSupply()": {
                    "details": "See {IERC721Enumerable-totalSupply}."
               },
               "transferFrom(address,address,uint256)": {
                    "details": "See {IERC721-transferFrom}."
               },
               "transferOwnership(address)": {
                    "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
               }
          },
          "title": "A NFT Colection Minting Contract",
          "version": 1
     },
     "userdoc": {
          "kind": "user",
          "methods": {},
          "notice": "This contract is to make a NFT minting website",
          "version": 1
     },
     "storageLayout": {
          "storage": [
               {
                    "astId": 138,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_name",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_string_storage"
               },
               {
                    "astId": 140,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_symbol",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_string_storage"
               },
               {
                    "astId": 144,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_owners",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_mapping(t_uint256,t_address)"
               },
               {
                    "astId": 148,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_balances",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_mapping(t_address,t_uint256)"
               },
               {
                    "astId": 152,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_tokenApprovals",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_mapping(t_uint256,t_address)"
               },
               {
                    "astId": 158,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_operatorApprovals",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
               },
               {
                    "astId": 1128,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_ownedTokens",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
               },
               {
                    "astId": 1132,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_ownedTokensIndex",
                    "offset": 0,
                    "slot": "7",
                    "type": "t_mapping(t_uint256,t_uint256)"
               },
               {
                    "astId": 1135,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_allTokens",
                    "offset": 0,
                    "slot": "8",
                    "type": "t_array(t_uint256)dyn_storage"
               },
               {
                    "astId": 1139,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_allTokensIndex",
                    "offset": 0,
                    "slot": "9",
                    "type": "t_mapping(t_uint256,t_uint256)"
               },
               {
                    "astId": 7,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "_owner",
                    "offset": 0,
                    "slot": "10",
                    "type": "t_address"
               },
               {
                    "astId": 2102,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "baseURI",
                    "offset": 0,
                    "slot": "11",
                    "type": "t_string_storage"
               },
               {
                    "astId": 2105,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "i_baseExtension",
                    "offset": 0,
                    "slot": "12",
                    "type": "t_string_storage"
               },
               {
                    "astId": 2108,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "s_cost",
                    "offset": 0,
                    "slot": "13",
                    "type": "t_uint256"
               },
               {
                    "astId": 2111,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "maxSupply",
                    "offset": 0,
                    "slot": "14",
                    "type": "t_uint256"
               },
               {
                    "astId": 2114,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "revealed",
                    "offset": 0,
                    "slot": "15",
                    "type": "t_bool"
               },
               {
                    "astId": 2117,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "s_maxMintAmount",
                    "offset": 0,
                    "slot": "16",
                    "type": "t_uint256"
               },
               {
                    "astId": 2119,
                    "contract": "contracts/MintingDapp.sol:MintingDapp",
                    "label": "notRevealedUri",
                    "offset": 0,
                    "slot": "17",
                    "type": "t_string_storage"
               }
          ],
          "types": {
               "t_address": {
                    "encoding": "inplace",
                    "label": "address",
                    "numberOfBytes": "20"
               },
               "t_array(t_uint256)dyn_storage": {
                    "base": "t_uint256",
                    "encoding": "dynamic_array",
                    "label": "uint256[]",
                    "numberOfBytes": "32"
               },
               "t_bool": {
                    "encoding": "inplace",
                    "label": "bool",
                    "numberOfBytes": "1"
               },
               "t_mapping(t_address,t_bool)": {
                    "encoding": "mapping",
                    "key": "t_address",
                    "label": "mapping(address => bool)",
                    "numberOfBytes": "32",
                    "value": "t_bool"
               },
               "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                    "encoding": "mapping",
                    "key": "t_address",
                    "label": "mapping(address => mapping(address => bool))",
                    "numberOfBytes": "32",
                    "value": "t_mapping(t_address,t_bool)"
               },
               "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
                    "encoding": "mapping",
                    "key": "t_address",
                    "label": "mapping(address => mapping(uint256 => uint256))",
                    "numberOfBytes": "32",
                    "value": "t_mapping(t_uint256,t_uint256)"
               },
               "t_mapping(t_address,t_uint256)": {
                    "encoding": "mapping",
                    "key": "t_address",
                    "label": "mapping(address => uint256)",
                    "numberOfBytes": "32",
                    "value": "t_uint256"
               },
               "t_mapping(t_uint256,t_address)": {
                    "encoding": "mapping",
                    "key": "t_uint256",
                    "label": "mapping(uint256 => address)",
                    "numberOfBytes": "32",
                    "value": "t_address"
               },
               "t_mapping(t_uint256,t_uint256)": {
                    "encoding": "mapping",
                    "key": "t_uint256",
                    "label": "mapping(uint256 => uint256)",
                    "numberOfBytes": "32",
                    "value": "t_uint256"
               },
               "t_string_storage": {
                    "encoding": "bytes",
                    "label": "string",
                    "numberOfBytes": "32"
               },
               "t_uint256": {
                    "encoding": "inplace",
                    "label": "uint256",
                    "numberOfBytes": "32"
               }
          }
     }
}
